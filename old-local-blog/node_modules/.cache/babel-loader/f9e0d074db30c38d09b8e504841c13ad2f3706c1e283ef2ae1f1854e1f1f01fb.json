{"ast":null,"code":"import { createAction, createReducer, current } from '@reduxjs/toolkit';\nimport { initalPostList } from '../constants/blog';\nconst initialState = {\n  postList: initalPostList,\n  editPost: null\n};\nexport const addPost = createAction('blog/addPost', post => {\n  return {\n    addPost: {\n      ...post,\n      id: new Date().toISOString()\n    }\n  };\n});\nexport const deletePost = createAction('blog/deletePost');\nexport const editPost = createAction('blog/editPost');\nexport const updatePost = createAction('blog/updatePost');\nexport const cancelUpdatePost = createAction('blog/cancelUpdatePost');\n\n// builder callback\nconst blogReducer = createReducer(initialState, builder => {\n  builder.addCase(addPost, (state, action) => {\n    const post = action.payload;\n    state.postList.push(post);\n  }).addCase(deletePost, (state, action) => {\n    const postID = action.payload;\n    const findIndexPost = state.postList.findIndex(post => post.id === postID);\n    console.log(findIndexPost);\n    if (findIndexPost !== -1) {\n      state.postList.splice(findIndexPost, 1);\n    }\n  }).addCase(editPost, (state, action) => {\n    const postID = action.payload.id;\n    const findIndexPost = state.postList.findIndex(post => post.id === postID);\n    if (findIndexPost !== -1) {\n      state.editPost = action.payload;\n    }\n  }).addCase(updatePost, (state, action) => {\n    const postID = action.payload.id;\n    state.postList.some((post, index) => {\n      if (post.id === postID) {\n        state.postList[index] = action.payload;\n      }\n      return false;\n    });\n  }).addCase(cancelUpdatePost, state => {\n    state.editPost = null;\n  }).addMatcher(action => action.type.includes('cancel'), (state, action) => {\n    console.log(current(state));\n  });\n});\n\n// Map Object ==> \n// const blogReducer = createReducer(initialState, {\n//         [addPost.type]: (state, action: PayloadAction) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n\n//         [deletePost.type]: (state, action) => {\n//             const postID = action.payload;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             console.log(findIndexPost)\n//             if(findIndexPost !== -1) {\n//                 state.postList.splice(findIndexPost, 1)\n//             }\n//         },\n\n//         [editPost.type]: (state, action) => {\n//             const postID = action.payload.id;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             if(findIndexPost !== -1) {\n//                 state.editPost = action.payload\n//             }\n//         },\n//         [updatePost.type]: (state, action) => {\n//             const postID = action.payload.id;\n//             state.postList.some((post, index) => {\n//                 if(post.id === postID) {\n//                     state.postList[index] = action.payload;\n//                 }\n//                 return false\n//             });\n//         },\n//         [cancelUpdatePost.type]: (state) => {\n//             state.editPost = null\n//         }\n//     },\n//     [\n//         {\n//             matcher: ((action: any) => action.type.includes('cancel')) as any,\n//             reducer(state, action) {\n//                 console.log(current(state))\n//             }\n//         }\n//     ],\n//     (state) => {\n//         console.log('state')\n//     }\n// );\n\nexport default blogReducer;","map":{"version":3,"names":["createAction","createReducer","current","initalPostList","initialState","postList","editPost","addPost","post","id","Date","toISOString","deletePost","updatePost","cancelUpdatePost","blogReducer","builder","addCase","state","action","payload","push","postID","findIndexPost","findIndex","console","log","splice","some","index","addMatcher","type","includes"],"sources":["/home/quynhanh/Documents/redux-toolkit/old-local-blog/src/page/blog.reducer.ts"],"sourcesContent":["import { createAction, createReducer, current, PayloadAction } from '@reduxjs/toolkit'\nimport { Post } from '../types/blog.type'\nimport { initalPostList } from '../constants/blog'\n\ninterface initialStateType {\n    postList: Post[] \n    editPost: Post | null\n}\n\nconst initialState: initialStateType = {\n    postList: initalPostList,\n    editPost: null\n}\n\nexport const addPost = createAction<Post>('blog/addPost', (post: Post) => {\n    return {\n        addPost: {\n            ...post,\n            id: new Date().toISOString()\n        }\n    }\n});\n\nexport const deletePost = createAction<string>('blog/deletePost');\n\nexport const editPost = createAction<Post>('blog/editPost');\n\nexport const updatePost = createAction<Post>('blog/updatePost');\n\nexport const cancelUpdatePost = createAction('blog/cancelUpdatePost');\n\n\n// builder callback\nconst blogReducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(addPost, (state, action) => {\n            const post = action.payload;\n            state.postList.push(post)\n\n        })\n        .addCase(deletePost, (state, action) => {\n            const postID = action.payload;\n            const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n            console.log(findIndexPost)\n            if(findIndexPost !== -1) {\n                state.postList.splice(findIndexPost, 1)\n            }\n        })\n        .addCase(editPost, (state, action) => {\n            const postID = action.payload.id;\n            const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n            if(findIndexPost !== -1) {\n                state.editPost = action.payload\n            }\n        })\n        .addCase(updatePost, (state, action) => {\n            const postID = action.payload.id;\n            state.postList.some((post, index) => {\n                if(post.id === postID) {\n                    state.postList[index] = action.payload;\n                }\n                return false\n            });\n        })\n        .addCase(cancelUpdatePost, (state) => {\n            state.editPost = null\n        })\n        .addMatcher((action) => (action.type as string).includes('cancel') , (state, action) => {\n            console.log(current(state))\n        })\n})\n\n\n// Map Object ==> \n// const blogReducer = createReducer(initialState, {\n//         [addPost.type]: (state, action: PayloadAction) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n\n//         [deletePost.type]: (state, action) => {\n//             const postID = action.payload;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             console.log(findIndexPost)\n//             if(findIndexPost !== -1) {\n//                 state.postList.splice(findIndexPost, 1)\n//             }\n//         },\n\n//         [editPost.type]: (state, action) => {\n//             const postID = action.payload.id;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             if(findIndexPost !== -1) {\n//                 state.editPost = action.payload\n//             }\n//         },\n//         [updatePost.type]: (state, action) => {\n//             const postID = action.payload.id;\n//             state.postList.some((post, index) => {\n//                 if(post.id === postID) {\n//                     state.postList[index] = action.payload;\n//                 }\n//                 return false\n//             });\n//         },\n//         [cancelUpdatePost.type]: (state) => {\n//             state.editPost = null\n//         }\n//     },\n//     [\n//         {\n//             matcher: ((action: any) => action.type.includes('cancel')) as any,\n//             reducer(state, action) {\n//                 console.log(current(state))\n//             }\n//         }\n//     ],\n//     (state) => {\n//         console.log('state')\n//     }\n// );\n\nexport default blogReducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}