{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { initalPostList } from '../constants/blog';\nconst initialState = {\n  postList: initalPostList,\n  editPost: null\n};\nexport const addPost = createAction('blog/addPost');\nexport const deletePost = createAction('blog/deletePost');\nexport const editPost = createAction('blog/editPost');\nexport const updatePost = createAction('blog/updatePost');\nexport const cancelUpdatePost = createAction('blog/cancelUpdatePost');\n\n// builder callback\n// const blogReducer = createReducer(initialState, (builder) => {\n//     builder\n//         .addCase(addPost, (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n\n//         })\n//         .addCase(deletePost, (state, action) => {\n//             const postID = action.payload;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             console.log(findIndexPost)\n//             if(findIndexPost !== -1) {\n//                 state.postList.splice(findIndexPost, 1)\n//             }\n//         })\n//         .addCase(editPost, (state, action) => {\n//             const postID = action.payload.id;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             if(findIndexPost !== -1) {\n//                 state.editPost = action.payload\n//             }\n//         })\n//         .addCase(updatePost, (state, action) => {\n//             const postID = action.payload.id;\n//             state.postList.some((post, index) => {\n//                 if(post.id === postID) {\n//                     state.postList[index] = action.payload;\n//                 }\n//                 return false\n//             });\n//         })\n//         .addCase(cancelUpdatePost, (state) => {\n//             state.editPost = null\n//         })\n//         .addMatcher((action) => (action.type as string).includes('cancel') , (state, action) => {\n//             console.log(current(state))\n//         })\n// })\n\nexport default blogReducer;","map":{"version":3,"names":["createAction","initalPostList","initialState","postList","editPost","addPost","deletePost","updatePost","cancelUpdatePost","blogReducer"],"sources":["/home/quynhanh/Documents/redux-toolkit/old-local-blog/src/page/blog.reducer.ts"],"sourcesContent":["import { createAction, createReducer, current } from '@reduxjs/toolkit'\nimport { Post } from '../types/blog.type'\nimport { initalPostList } from '../constants/blog'\n\ninterface initialStateType {\n    postList: Post[] \n    editPost: Post | null\n}\n\nconst initialState: initialStateType = {\n    postList: initalPostList,\n    editPost: null\n}\n\nexport const addPost = createAction<Post>('blog/addPost');\n\nexport const deletePost = createAction<string>('blog/deletePost');\n\nexport const editPost = createAction<Post>('blog/editPost');\n\nexport const updatePost = createAction<Post>('blog/updatePost');\n\nexport const cancelUpdatePost = createAction('blog/cancelUpdatePost');\n\n\n// builder callback\n// const blogReducer = createReducer(initialState, (builder) => {\n//     builder\n//         .addCase(addPost, (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n\n//         })\n//         .addCase(deletePost, (state, action) => {\n//             const postID = action.payload;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             console.log(findIndexPost)\n//             if(findIndexPost !== -1) {\n//                 state.postList.splice(findIndexPost, 1)\n//             }\n//         })\n//         .addCase(editPost, (state, action) => {\n//             const postID = action.payload.id;\n//             const findIndexPost = state.postList.findIndex((post) => post.id === postID);\n//             if(findIndexPost !== -1) {\n//                 state.editPost = action.payload\n//             }\n//         })\n//         .addCase(updatePost, (state, action) => {\n//             const postID = action.payload.id;\n//             state.postList.some((post, index) => {\n//                 if(post.id === postID) {\n//                     state.postList[index] = action.payload;\n//                 }\n//                 return false\n//             });\n//         })\n//         .addCase(cancelUpdatePost, (state) => {\n//             state.editPost = null\n//         })\n//         .addMatcher((action) => (action.type as string).includes('cancel') , (state, action) => {\n//             console.log(current(state))\n//         })\n// })\n\nexport default blogReducer;"],"mappings":"AAAA,SAASA,YAAY,QAAgC,kBAAkB;AAEvE,SAASC,cAAc,QAAQ,mBAAmB;AAOlD,MAAMC,YAA8B,GAAG;EACnCC,QAAQ,EAAEF,cAAc;EACxBG,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGL,YAAY,CAAO,cAAc,CAAC;AAEzD,OAAO,MAAMM,UAAU,GAAGN,YAAY,CAAS,iBAAiB,CAAC;AAEjE,OAAO,MAAMI,QAAQ,GAAGJ,YAAY,CAAO,eAAe,CAAC;AAE3D,OAAO,MAAMO,UAAU,GAAGP,YAAY,CAAO,iBAAiB,CAAC;AAE/D,OAAO,MAAMQ,gBAAgB,GAAGR,YAAY,CAAC,uBAAuB,CAAC;;AAGrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeS,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}