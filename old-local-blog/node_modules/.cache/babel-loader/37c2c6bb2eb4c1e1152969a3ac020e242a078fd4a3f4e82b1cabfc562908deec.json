{"ast":null,"code":"import { createAction } from \"@reduxjs/toolkit\";\nimport { initalPostList } from \"../constants/blog\";\nconst initialPostList = {\n  postList: initalPostList,\n  editPost: null\n};\nexport const addPost = createAction('blog/addPost');\nexport const deletePost = createAction('blog/deletePost');\nexport const editPost = createAction('blog/editPost');\nexport const cancelEditPost = createAction('blog/cancelEditPost');\nexport const updatePost = createAction('blog/updatePost');\n\n// export const blogReducer = createReducer(initialPostList, (builder) => {\n//     builder\n//         .addCase(addPost, (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         })\n//         .addCase(deletePost, (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         })\n//         .addCase(editPost, (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         })\n//         .addCase(cancelEditPost, (state, action) => {\n//             state.editPost = null\n//         })\n//         .addCase(updatePost, (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         })\n// })\n\n// export const blogReducer = createReducer(initialPostList,  {\n//         [addPost.type]: (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n//         deletePost: (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         },\n//         editPost: (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         },\n//         cancelEditPost: (state, action) => {\n//             state.editPost = null\n//         },\n//         updatePost: (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         },\n// })","map":{"version":3,"names":["createAction","initalPostList","initialPostList","postList","editPost","addPost","deletePost","cancelEditPost","updatePost"],"sources":["/home/quynhanh/Documents/redux-toolkit/src/page/blog.reducer.ts"],"sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { Post } from \"../types/blog.type\";\nimport { initalPostList } from \"../constants/blog\";\n\nexport interface BlogState {\n    postList: Post[]\n    editPost: Post | null\n}\n\nconst initialPostList: BlogState = {\n    postList: initalPostList,\n    editPost: null\n}\n\nexport const addPost = createAction<Post>('blog/addPost');\n\nexport const deletePost = createAction<string>('blog/deletePost');\n\nexport const editPost = createAction<string>('blog/editPost');\n\nexport const cancelEditPost = createAction('blog/cancelEditPost');\n\nexport const updatePost = createAction<Post>('blog/updatePost');\n\n// export const blogReducer = createReducer(initialPostList, (builder) => {\n//     builder\n//         .addCase(addPost, (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         })\n//         .addCase(deletePost, (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         })\n//         .addCase(editPost, (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         })\n//         .addCase(cancelEditPost, (state, action) => {\n//             state.editPost = null\n//         })\n//         .addCase(updatePost, (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         })\n// })\n\n\n// export const blogReducer = createReducer(initialPostList,  {\n//         [addPost.type]: (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n//         deletePost: (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         },\n//         editPost: (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         },\n//         cancelEditPost: (state, action) => {\n//             state.editPost = null\n//         },\n//         updatePost: (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         },\n// })"],"mappings":"AAAA,SAASA,YAAY,QAAuB,kBAAkB;AAE9D,SAASC,cAAc,QAAQ,mBAAmB;AAOlD,MAAMC,eAA0B,GAAG;EAC/BC,QAAQ,EAAEF,cAAc;EACxBG,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGL,YAAY,CAAO,cAAc,CAAC;AAEzD,OAAO,MAAMM,UAAU,GAAGN,YAAY,CAAS,iBAAiB,CAAC;AAEjE,OAAO,MAAMI,QAAQ,GAAGJ,YAAY,CAAS,eAAe,CAAC;AAE7D,OAAO,MAAMO,cAAc,GAAGP,YAAY,CAAC,qBAAqB,CAAC;AAEjE,OAAO,MAAMQ,UAAU,GAAGR,YAAY,CAAO,iBAAiB,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}