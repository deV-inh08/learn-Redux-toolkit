{"ast":null,"code":"import { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { initalPostList } from \"../constants/blog\";\nconst initialPostList = {\n  postList: initalPostList\n};\nexport const addPost = createAction('blog/addPost');\nexport const deletePost = createAction('blog/deletePost');\nexport const updatePost = createAction('blog/updatePost');\nexport const blogReducer = createReducer(initialPostList, builder => {\n  builder.addCase(addPost, (state, action) => {\n    const post = action.payload;\n    state.postList.push(post);\n  }).addCase(deletePost, (state, action) => {\n    const id = action.payload;\n    const foundIndex = state.postList.findIndex(post => post.id === id);\n    if (foundIndex !== -1) {\n      state.postList.splice(foundIndex, 1);\n    }\n  }).addCase(updatePost, (state, action) => {\n    const id = action.payload;\n    const findPost = state.postList.find(post => post.id === id);\n  });\n});","map":{"version":3,"names":["createAction","createReducer","initalPostList","initialPostList","postList","addPost","deletePost","updatePost","blogReducer","builder","addCase","state","action","post","payload","push","id","foundIndex","findIndex","splice","findPost","find"],"sources":["/home/quynhanh/Documents/redux-toolkit/src/page/blog.reducer.ts"],"sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\nimport { Post } from \"../types/blog.type\";\nimport { initalPostList } from \"../constants/blog\";\n\nexport interface BlogState {\n    postList: Post[]\n}\n\nconst initialPostList: BlogState = {\n    postList: initalPostList\n}\n\nexport const addPost = createAction<Post>('blog/addPost');\n\nexport const deletePost = createAction<string>('blog/deletePost');\n\nexport const updatePost = createAction<string>('blog/updatePost');\n\nexport const blogReducer = createReducer(initialPostList, (builder) => {\n    builder\n        .addCase(addPost, (state, action) => {\n            const post = action.payload;\n            state.postList.push(post)\n        })\n        .addCase(deletePost, (state, action) => {\n            const id = action.payload;\n            const foundIndex = state.postList.findIndex((post) => post.id === id);\n            if(foundIndex !== -1) {\n                state.postList.splice(foundIndex, 1)\n            }\n        })\n        .addCase(updatePost, (state, action) => {\n            const id = action.payload;\n            const findPost = state.postList.find((post) => post.id === id)\n        })\n})"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;AAE9D,SAASC,cAAc,QAAQ,mBAAmB;AAMlD,MAAMC,eAA0B,GAAG;EAC/BC,QAAQ,EAAEF;AACd,CAAC;AAED,OAAO,MAAMG,OAAO,GAAGL,YAAY,CAAO,cAAc,CAAC;AAEzD,OAAO,MAAMM,UAAU,GAAGN,YAAY,CAAS,iBAAiB,CAAC;AAEjE,OAAO,MAAMO,UAAU,GAAGP,YAAY,CAAS,iBAAiB,CAAC;AAEjE,OAAO,MAAMQ,WAAW,GAAGP,aAAa,CAACE,eAAe,EAAGM,OAAO,IAAK;EACnEA,OAAO,CACFC,OAAO,CAACL,OAAO,EAAE,CAACM,KAAK,EAAEC,MAAM,KAAK;IACjC,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;IAC3BH,KAAK,CAACP,QAAQ,CAACW,IAAI,CAACF,IAAI,CAAC;EAC7B,CAAC,CAAC,CACDH,OAAO,CAACJ,UAAU,EAAE,CAACK,KAAK,EAAEC,MAAM,KAAK;IACpC,MAAMI,EAAE,GAAGJ,MAAM,CAACE,OAAO;IACzB,MAAMG,UAAU,GAAGN,KAAK,CAACP,QAAQ,CAACc,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKA,EAAE,CAAC;IACrE,IAAGC,UAAU,KAAK,CAAC,CAAC,EAAE;MAClBN,KAAK,CAACP,QAAQ,CAACe,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;IACxC;EACJ,CAAC,CAAC,CACDP,OAAO,CAACH,UAAU,EAAE,CAACI,KAAK,EAAEC,MAAM,KAAK;IACpC,MAAMI,EAAE,GAAGJ,MAAM,CAACE,OAAO;IACzB,MAAMM,QAAQ,GAAGT,KAAK,CAACP,QAAQ,CAACiB,IAAI,CAAER,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKA,EAAE,CAAC;EAClE,CAAC,CAAC;AACV,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}