{"ast":null,"code":"import { createAction, createReducer, nanoid } from \"@reduxjs/toolkit\";\nimport { initalPostList } from \"../constants/blog\";\nconst initialPostList = {\n  postList: initalPostList,\n  editPost: null\n};\nexport const addPost = createAction('blog/addPost', function (post) {\n  return {\n    payload: {\n      ...post,\n      id: nanoid()\n    }\n  };\n});\nexport const deletePost = createAction('blog/deletePost');\nexport const editPost = createAction('blog/editPost');\nexport const cancelEditPost = createAction('blog/cancelEditPost');\nexport const updatePost = createAction('blog/updatePost');\nexport const blogReducer = createReducer(initialPostList, builder => {\n  builder.addCase(addPost, (state, action) => {\n    const post = action.payload;\n    state.postList.push(post);\n  }).addCase(deletePost, (state, action) => {\n    const id = action.payload;\n    const foundIndex = state.postList.findIndex(post => post.id === id);\n    if (foundIndex !== -1) {\n      state.postList.splice(foundIndex, 1);\n    }\n  }).addCase(editPost, (state, action) => {\n    const id = action.payload;\n    const findPost = state.postList.find(post => post.id === id) || null;\n    state.editPost = findPost;\n  }).addCase(cancelEditPost, (state, action) => {\n    state.editPost = null;\n  }).addCase(updatePost, (state, action) => {\n    const id = action.payload.id;\n    console.log(action.payload);\n    state.postList.some((post, index) => {\n      if (post.id === id) {\n        state.postList[index] = action.payload;\n        return true;\n      }\n      return false;\n    });\n  });\n});\n\n// export const blogReducer = createReducer(initialPostList,  {\n//         [addPost.type]: (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n//         deletePost: (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         },\n//         editPost: (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         },\n//         cancelEditPost: (state, action) => {\n//             state.editPost = null\n//         },\n//         updatePost: (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         },\n// })","map":{"version":3,"names":["createAction","createReducer","nanoid","initalPostList","initialPostList","postList","editPost","addPost","post","payload","id","deletePost","cancelEditPost","updatePost","blogReducer","builder","addCase","state","action","push","foundIndex","findIndex","splice","findPost","find","console","log","some","index"],"sources":["/home/quynhanh/Documents/redux-toolkit/src/page/blog.reducer.ts"],"sourcesContent":["import { createAction, createReducer, nanoid } from \"@reduxjs/toolkit\";\nimport { Post } from \"../types/blog.type\";\nimport { initalPostList } from \"../constants/blog\";\n\nexport interface BlogState {\n    postList: Post[]\n    editPost: Post | null\n}\n\nconst initialPostList: BlogState = {\n    postList: initalPostList,\n    editPost: null\n}\n\nexport const addPost = createAction('blog/addPost', function(post: Omit<Post, 'id'>) {\n    return {\n        payload: {\n            ...post,\n            id: nanoid()\n        }\n    }\n});\n\nexport const deletePost = createAction<string>('blog/deletePost');\n\nexport const editPost = createAction<string>('blog/editPost');\n\nexport const cancelEditPost = createAction('blog/cancelEditPost');\n\nexport const updatePost = createAction<Post>('blog/updatePost');\n\nexport const blogReducer = createReducer(initialPostList, (builder) => {\n    builder\n        .addCase(addPost, (state, action) => {\n            const post = action.payload;\n            state.postList.push(post)\n        })\n        .addCase(deletePost, (state, action) => {\n            const id = action.payload;\n            const foundIndex = state.postList.findIndex((post) => post.id === id);\n            if(foundIndex !== -1) {\n                state.postList.splice(foundIndex, 1)\n            }\n        })\n        .addCase(editPost, (state, action) => {\n            const id = action.payload;\n            const findPost = state.postList.find((post) => post.id === id) || null;\n            state.editPost = findPost\n        })\n        .addCase(cancelEditPost, (state, action) => {\n            state.editPost = null\n        })\n        .addCase(updatePost, (state, action) => {\n            const id = action.payload.id;\n            console.log(action.payload)\n            state.postList.some((post, index) => {\n                if(post.id === id) {\n                    state.postList[index] = action.payload;\n                    return true\n                }\n                return false\n            })\n        })\n})\n\n\n// export const blogReducer = createReducer(initialPostList,  {\n//         [addPost.type]: (state, action) => {\n//             const post = action.payload;\n//             state.postList.push(post)\n//         },\n//         deletePost: (state, action) => {\n//             const id = action.payload;\n//             const foundIndex = state.postList.findIndex((post) => post.id === id);\n//             if(foundIndex !== -1) {\n//                 state.postList.splice(foundIndex, 1)\n//             }\n//         },\n//         editPost: (state, action) => {\n//             const id = action.payload;\n//             const findPost = state.postList.find((post) => post.id === id) || null;\n//             state.editPost = findPost\n//         },\n//         cancelEditPost: (state, action) => {\n//             state.editPost = null\n//         },\n//         updatePost: (state, action) => {\n//             const id = action.payload.id;\n//             console.log(action.payload)\n//             state.postList.some((post, index) => {\n//                 if(post.id === id) {\n//                     state.postList[index] = action.payload;\n//                     return true\n//                 }\n//                 return false\n//             })\n//         },\n// })"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,MAAM,QAAQ,kBAAkB;AAEtE,SAASC,cAAc,QAAQ,mBAAmB;AAOlD,MAAMC,eAA0B,GAAG;EAC/BC,QAAQ,EAAEF,cAAc;EACxBG,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGP,YAAY,CAAC,cAAc,EAAE,UAASQ,IAAsB,EAAE;EACjF,OAAO;IACHC,OAAO,EAAE;MACL,GAAGD,IAAI;MACPE,EAAE,EAAER,MAAM,CAAC;IACf;EACJ,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMS,UAAU,GAAGX,YAAY,CAAS,iBAAiB,CAAC;AAEjE,OAAO,MAAMM,QAAQ,GAAGN,YAAY,CAAS,eAAe,CAAC;AAE7D,OAAO,MAAMY,cAAc,GAAGZ,YAAY,CAAC,qBAAqB,CAAC;AAEjE,OAAO,MAAMa,UAAU,GAAGb,YAAY,CAAO,iBAAiB,CAAC;AAE/D,OAAO,MAAMc,WAAW,GAAGb,aAAa,CAACG,eAAe,EAAGW,OAAO,IAAK;EACnEA,OAAO,CACFC,OAAO,CAACT,OAAO,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAK;IACjC,MAAMV,IAAI,GAAGU,MAAM,CAACT,OAAO;IAC3BQ,KAAK,CAACZ,QAAQ,CAACc,IAAI,CAACX,IAAI,CAAC;EAC7B,CAAC,CAAC,CACDQ,OAAO,CAACL,UAAU,EAAE,CAACM,KAAK,EAAEC,MAAM,KAAK;IACpC,MAAMR,EAAE,GAAGQ,MAAM,CAACT,OAAO;IACzB,MAAMW,UAAU,GAAGH,KAAK,CAACZ,QAAQ,CAACgB,SAAS,CAAEb,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKA,EAAE,CAAC;IACrE,IAAGU,UAAU,KAAK,CAAC,CAAC,EAAE;MAClBH,KAAK,CAACZ,QAAQ,CAACiB,MAAM,CAACF,UAAU,EAAE,CAAC,CAAC;IACxC;EACJ,CAAC,CAAC,CACDJ,OAAO,CAACV,QAAQ,EAAE,CAACW,KAAK,EAAEC,MAAM,KAAK;IAClC,MAAMR,EAAE,GAAGQ,MAAM,CAACT,OAAO;IACzB,MAAMc,QAAQ,GAAGN,KAAK,CAACZ,QAAQ,CAACmB,IAAI,CAAEhB,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;IACtEO,KAAK,CAACX,QAAQ,GAAGiB,QAAQ;EAC7B,CAAC,CAAC,CACDP,OAAO,CAACJ,cAAc,EAAE,CAACK,KAAK,EAAEC,MAAM,KAAK;IACxCD,KAAK,CAACX,QAAQ,GAAG,IAAI;EACzB,CAAC,CAAC,CACDU,OAAO,CAACH,UAAU,EAAE,CAACI,KAAK,EAAEC,MAAM,KAAK;IACpC,MAAMR,EAAE,GAAGQ,MAAM,CAACT,OAAO,CAACC,EAAE;IAC5Be,OAAO,CAACC,GAAG,CAACR,MAAM,CAACT,OAAO,CAAC;IAC3BQ,KAAK,CAACZ,QAAQ,CAACsB,IAAI,CAAC,CAACnB,IAAI,EAAEoB,KAAK,KAAK;MACjC,IAAGpB,IAAI,CAACE,EAAE,KAAKA,EAAE,EAAE;QACfO,KAAK,CAACZ,QAAQ,CAACuB,KAAK,CAAC,GAAGV,MAAM,CAACT,OAAO;QACtC,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN,CAAC,CAAC;AACV,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}